from decimal import Decimal
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from asgiref.sync import sync_to_async
from ..models import Product, Order, UserProfile
from ..keyboards import payment_methods_keyboard, main_menu_keyboard

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è ORM-–º–µ—Ç–æ–¥–æ–≤
@sync_to_async
def get_product_with_price(product_id):
    try:
        return Product.objects.select_related().get(id=product_id, is_active=True)
    except Product.DoesNotExist:
        return None

@sync_to_async
def create_order_with_product(user_id, product):
    order = Order.objects.create(
        user_id=user_id,
        product=product,
        status='pending'
    )
    return Order.objects.select_related('product').get(id=order.id)

@sync_to_async
def get_order_with_product(order_id, user_id):
    try:
        return Order.objects.select_related('product').get(id=order_id, user_id=user_id)
    except Order.DoesNotExist:
        return None

@sync_to_async
def save_order_payment_data(order_id, payment_method):
    order = Order.objects.get(id=order_id)
    order.payment_data = {
        'method': payment_method,
        'status': 'waiting_confirmation'
    }
    order.save()
    return order

@sync_to_async
def cancel_order(order_id, user_id):
    try:
        order = Order.objects.get(id=order_id, user_id=user_id)
        order.status = 'cancelled'
        order.save()
        return True
    except Order.DoesNotExist:
        return False

async def initiate_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    product_id = int(query.data.split('_')[1])
    product = await get_product_with_price(product_id)

    if product:
        user_id = query.from_user.id
        order = await create_order_with_product(user_id, product)

        payment_text = f"""
        üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

        –¢–æ–≤–∞—Ä: {product.name}
        –¶–µ–Ω–∞: {product.price} —Ä—É–±.

        –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
        """

        await query.edit_message_text(
            payment_text,
            reply_markup=payment_methods_keyboard(order.id)
        )
    else:
        await query.edit_message_text(
            "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=main_menu_keyboard()
        )

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    payment_method = data[1]
    order_id = int(data[2])

    order = await get_order_with_product(order_id, query.from_user.id)

    if order:
        product_price = order.product.price

        if payment_method == 'card':
            payment_info = f"""
            üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:

            –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1234 5678 9012 3456
            –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
            –°—É–º–º–∞: {product_price} —Ä—É–±.

            –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ @admin_username
            """

        elif payment_method == 'crypto':
            payment_info = f"""
            üì± –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:

            BTC –∞–¥—Ä–µ—Å: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            ETH –∞–¥—Ä–µ—Å: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
            USDT (TRC20): TAbnT7PkYjLPz6bLpWnq6mLmXyX2n2n2n2

            –°—É–º–º–∞: {product_price} —Ä—É–±. (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ –∫—É—Ä—Å—É –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã)

            –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ @admin_username
            """

        await save_order_payment_data(order.id, payment_method)

        await query.edit_message_text(
            payment_info,
            reply_markup=main_menu_keyboard()
        )
    else:
        await query.edit_message_text(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=main_menu_keyboard()
        )

async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –µ—Å—Ç—å order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    order_id = context.user_data.get('current_order_id')

    if order_id:
        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
        success = await cancel_order(order_id, query.from_user.id)
        if success:
            message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω."
        else:
            message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    else:
        message = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

    await query.edit_message_text(
        message,
        reply_markup=main_menu_keyboard()
    )

payment_handlers = [
    CallbackQueryHandler(initiate_payment, pattern='^buy_'),
    CallbackQueryHandler(process_payment, pattern='^pay_(card|crypto)_'),
    CallbackQueryHandler(cancel_payment, pattern='^cancel_payment$')
]
